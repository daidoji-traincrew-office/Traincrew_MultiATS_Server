name: Build and push
on:
  workflow_dispatch: { }
  push:
    branches:
      - '**'

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  IMAGE_NAME: ${{ github.event.repository.name }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        application: [ '', 'Passenger' ]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Calc Image Name
        id: calc_image_name
        shell: bash
        run: |
          branch=$(echo ${GITHUB_REF#refs/heads/} | sed 's|/|_|g)
          if [ -z "${{ matrix.application }}" ]; then
              image=${{ env.IMAGE_NAME }}
              dockerfile=Dockerfile
          else
              image=${{ env.IMAGE_NAME }}_${{ matrix.application }}
              dockerfile=Dockerfile.${{ matrix.application }}
          fi
          repository=$(echo "${{ env.REGISTRY }}/${{ env.OWNER }}/${image}" | tr '[:upper:]' '[:lower:]')
          tag=$(echo "${repository}:${branch}" | tr '[:upper:]' '[:lower:]')
          echo "Repository=$repository" >> $GITHUB_OUTPUT
          echo "Tag=$tag" >> $GITHUB_OUTPUT
          echo "Dockerfile=$dockerfile" >> $GITHUB_OUTPUT
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1
      - name: Login to Docker harbor
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: push
        uses: docker/build-push-action@v6.9.0
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.calc_image_name.outputs.TAG }}
          file: ${{ steps.calc_image_name.outputs.Dockerfile }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2.2.3
        with:
          subject-name: "${{ steps.calc_image_name.outputs.Repository }}"
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
